{"ast":null,"code":"import { makeRequest } from \"./api\";\nexport function createComment({\n  postId,\n  message,\n  parentId\n}) {\n  const token = localStorage.getItem('token'); // Get the token from localStorage\n\n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n  return makeRequest(`/posts/${postId}/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      // Send the token in the Authorization header\n      'Content-Type': 'application/json' // Ensure the request body is JSON\n    },\n    data: {\n      message,\n      parentId\n    } // Do not pass the user explicitly, as the backend extracts it from the token\n  });\n}\nexport function updateComment({\n  message,\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      message\n    }\n  });\n}\nexport function deleteComment({\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n}\nexport function toggleCommentLike({\n  id: commentId\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      commentId\n    }\n  });\n}\nexport function getPost(postId) {\n  return makeRequest(`/posts/${postId}`);\n}\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return fetch('/api/auth/user', {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}` // Pass token in Authorization header\n    }\n  }).then(response => response.json()).then(data => data.user) // Assume the response contains a 'user' object\n  .catch(error => {\n    console.error('Error fetching current user:', error);\n    throw error;\n  });\n}","map":{"version":3,"names":["makeRequest","createComment","postId","message","parentId","token","localStorage","getItem","Promise","reject","method","headers","data","updateComment","id","deleteComment","toggleCommentLike","commentId","getPost","getCurrentUser","fetch","then","response","json","user","catch","error","console"],"sources":["/Users/chawsuhan/git-test/sem7-project/project/src/services/comments.js"],"sourcesContent":["import { makeRequest } from \"./api\";\n\nexport function createComment({ postId, message, parentId }) {\n  const token = localStorage.getItem('token');  // Get the token from localStorage\n  \n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n\n  return makeRequest(`/posts/${postId}/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,  // Send the token in the Authorization header\n      'Content-Type': 'application/json',  // Ensure the request body is JSON\n    },\n    data: { message, parentId },  // Do not pass the user explicitly, as the backend extracts it from the token\n  });\n}\n\n\n\nexport function updateComment({ message, id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { message },\n  });\n}\n\nexport function deleteComment({ id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n\nexport function toggleCommentLike({ id: commentId }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { commentId },\n  });\n}\n\nexport function getPost(postId) {\n  return makeRequest(`/posts/${postId}`);\n}\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return fetch('/api/auth/user', {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`,  // Pass token in Authorization header\n    },\n  })\n    .then(response => response.json())\n    .then(data => data.user)  // Assume the response contains a 'user' object\n    .catch(error => {\n      console.error('Error fetching current user:', error);\n      throw error;\n    });\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,SAASC,aAAaA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC3D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;;EAE9C,IAAI,CAACF,KAAK,EAAE;IACV,OAAOG,OAAO,CAACC,MAAM,CAAC,2BAA2B,CAAC;EACpD;EAEA,OAAOT,WAAW,CAAC,UAAUE,MAAM,WAAW,EAAE;IAC9CQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAAG;MACrC,cAAc,EAAE,kBAAkB,CAAG;IACvC,CAAC;IACDO,IAAI,EAAE;MAAET,OAAO;MAAEC;IAAS,CAAC,CAAG;EAChC,CAAC,CAAC;AACJ;AAIA,OAAO,SAASS,aAAaA,CAAC;EAAEV,OAAO;EAAEW;AAAG,CAAC,EAAE;EAC7C,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,aAAac,EAAE,EAAE,EAAE;IACpCJ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAET;IAAQ;EAClB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASY,aAAaA,CAAC;EAAED;AAAG,CAAC,EAAE;EACpC,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,aAAac,EAAE,EAAE,EAAE;IACpCJ,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ;AAGA,OAAO,SAASW,iBAAiBA,CAAC;EAAEF,EAAE,EAAEG;AAAU,CAAC,EAAE;EACnD,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,eAAe,EAAE;IAClCU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAEK;IAAU;EACpB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,OAAOA,CAAChB,MAAM,EAAE;EAC9B,OAAOF,WAAW,CAAC,UAAUE,MAAM,EAAE,CAAC;AACxC;;AAEA;AACA,OAAO,SAASiB,cAAcA,CAACd,KAAK,EAAE;EACpC,OAAOe,KAAK,CAAC,gBAAgB,EAAE;IAC7BV,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAG;IACvC;EACF,CAAC,CAAC,CACCgB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACY,IAAI,CAAC,CAAE;EAAA,CACzBC,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
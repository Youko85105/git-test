{"ast":null,"code":"import { makeRequest } from \"./api\";\nimport mongoose from \"mongoose\";\nimport Post from \"../models/Post.js\";\nimport Comment from \"../models/comment.model.js\";\nimport Like from \"../models/like.model.js\";\nexport function createComment({\n  postId,\n  message,\n  parentId\n}) {\n  const token = localStorage.getItem('token'); // Get the token from localStorage\n\n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n  return makeRequest(`/posts/${postId}/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      // Send the token in the Authorization header\n      'Content-Type': 'application/json' // Ensure the request body is JSON\n    },\n    data: {\n      message,\n      parentId\n    } // Do not pass the user explicitly, as the backend extracts it from the token\n  });\n}\nexport function updateComment({\n  message,\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      message\n    }\n  });\n}\nexport function deleteComment({\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n}\nexport function toggleCommentLike({\n  id: commentId\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      commentId\n    }\n  });\n}\nexport const getPostWithComments = async (req, res) => {\n  const postId = req.params.postId;\n  const userId = req.user._id;\n  try {\n    console.log(\"📌 Looking for post ID:\", req.params.postId);\n    console.log(\"🔎 req.user:\", req.user); // Should include `id` and `_id`\n    console.log(\"🧠 req.user._id:\", req.user._id);\n    console.log(\"🧠 req.user.id:\", req.user.id); // Might be undefined\n    const post = await Post.findById(postId).populate('author', 'username');\n    console.log(\"Populated author:\", post.author);\n    console.log(\"📌 Post found:\", post);\n    if (!post) return res.status(404).json({\n      error: 'Post not found'\n    });\n    const comments = await Comment.find({\n      postId: new mongoose.Types.ObjectId(postId)\n    }).sort({\n      createdAt: 1\n    }).populate('user', 'username');\n    console.log(\"Hi we are comments: \", comments);\n    const formattedComments = await Promise.all(comments.filter(c => c.user).map(async comment => {\n      const likeCount = await Like.countDocuments({\n        commentId: comment._id\n      });\n      const likedByMe = userId ? await Like.exists({\n        commentId: comment._id,\n        user: userId\n      }) : false;\n      return {\n        ...comment.toObject(),\n        likeCount,\n        likedByMe: !!likedByMe,\n        user: {\n          id: comment.user._id,\n          name: comment.user.username\n        }\n      };\n    }));\n    return res.status(200).json({\n      post: {\n        ...post.toObject(),\n        author: {\n          id: post.author._id,\n          name: post.author.username\n        }\n      },\n      comments: formattedComments\n    });\n  } catch (error) {\n    console.log(\"🔥 req.user:\", req.user);\n    console.error(\"❌ Fetch post with comments error:\", error);\n    return res.status(500).json({\n      error: \"Failed to fetch post and comments\"\n    });\n  }\n};\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return fetch('/api/auth/user', {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}` // Pass token in Authorization header\n    }\n  }).then(response => response.json()).then(data => data.user) // Assume the response contains a 'user' object\n  .catch(error => {\n    console.error('Error fetching current user:', error);\n    throw error;\n  });\n}","map":{"version":3,"names":["makeRequest","mongoose","Post","Comment","Like","createComment","postId","message","parentId","token","localStorage","getItem","Promise","reject","method","headers","data","updateComment","id","deleteComment","toggleCommentLike","commentId","getPostWithComments","req","res","params","userId","user","_id","console","log","post","findById","populate","author","status","json","error","comments","find","Types","ObjectId","sort","createdAt","formattedComments","all","filter","c","map","comment","likeCount","countDocuments","likedByMe","exists","toObject","name","username","getCurrentUser","fetch","then","response","catch"],"sources":["/Users/chawsuhan/git-test/sem7-project/project/src/services/comments.js"],"sourcesContent":["import { makeRequest } from \"./api\";\nimport mongoose from \"mongoose\";\nimport Post from \"../models/Post.js\";\nimport Comment from \"../models/comment.model.js\";\nimport Like from \"../models/like.model.js\";\n\nexport function createComment({ postId, message, parentId }) {\n  const token = localStorage.getItem('token');  // Get the token from localStorage\n  \n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n\n  return makeRequest(`/posts/${postId}/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,  // Send the token in the Authorization header\n      'Content-Type': 'application/json',  // Ensure the request body is JSON\n    },\n    data: { message, parentId },  // Do not pass the user explicitly, as the backend extracts it from the token\n  });\n}\n\n\n\nexport function updateComment({ message, id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { message },\n  });\n}\n\nexport function deleteComment({ id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n\nexport function toggleCommentLike({ id: commentId }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { commentId },\n  });\n}\n\nexport const getPostWithComments = async (req, res) => {\n    const postId = req.params.postId;\n    const userId = req.user._id;\n\n    try {\n        console.log(\"📌 Looking for post ID:\", req.params.postId);\n        console.log(\"🔎 req.user:\", req.user);       // Should include `id` and `_id`\n        console.log(\"🧠 req.user._id:\", req.user._id);\n        console.log(\"🧠 req.user.id:\", req.user.id); // Might be undefined\n        const post = await Post.findById(postId).populate('author', 'username');\n        console.log(\"Populated author:\", post.author);\n        console.log(\"📌 Post found:\", post);\n        if (!post) return res.status(404).json({ error: 'Post not found' });\n\n        const comments = await Comment.find({ postId: new mongoose.Types.ObjectId(postId) })\n                .sort({ createdAt: 1 })\n                .populate('user', 'username');\n        console.log(\"Hi we are comments: \" , comments)\n        const formattedComments = await Promise.all(\n            comments.filter(c => c.user).map(async comment => {\n                const likeCount = await Like.countDocuments({ commentId: comment._id });\n                const likedByMe = userId\n                    ? await Like.exists({ commentId: comment._id, user: userId })\n                    : false;\n\n                return {\n                    ...comment.toObject(),\n                    likeCount,\n                    likedByMe: !!likedByMe,\n                    user: {\n                        id: comment.user._id,\n                        name: comment.user.username,\n                    },\n                };\n            })\n        );\n\n        return res.status(200).json({\n            post: {\n                ...post.toObject(),\n                author: {\n                    id: post.author._id,\n                    name: post.author.username,\n                },\n            },\n            comments: formattedComments\n        });\n\n    } catch (error) {\n        console.log(\"🔥 req.user:\", req.user);\n        console.error(\"❌ Fetch post with comments error:\", error);\n        return res.status(500).json({ error: \"Failed to fetch post and comments\" });\n    }\n};\n\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return fetch('/api/auth/user', {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`,  // Pass token in Authorization header\n    },\n  })\n    .then(response => response.json())\n    .then(data => data.user)  // Assume the response contains a 'user' object\n    .catch(error => {\n      console.error('Error fetching current user:', error);\n      throw error;\n    });\n}"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,OAAO,MAAM,4BAA4B;AAChD,OAAOC,IAAI,MAAM,yBAAyB;AAE1C,OAAO,SAASC,aAAaA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC3D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAE;;EAE9C,IAAI,CAACF,KAAK,EAAE;IACV,OAAOG,OAAO,CAACC,MAAM,CAAC,2BAA2B,CAAC;EACpD;EAEA,OAAOb,WAAW,CAAC,UAAUM,MAAM,WAAW,EAAE;IAC9CQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAAG;MACrC,cAAc,EAAE,kBAAkB,CAAG;IACvC,CAAC;IACDO,IAAI,EAAE;MAAET,OAAO;MAAEC;IAAS,CAAC,CAAG;EAChC,CAAC,CAAC;AACJ;AAIA,OAAO,SAASS,aAAaA,CAAC;EAAEV,OAAO;EAAEW;AAAG,CAAC,EAAE;EAC7C,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOX,WAAW,CAAC,aAAakB,EAAE,EAAE,EAAE;IACpCJ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAET;IAAQ;EAClB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASY,aAAaA,CAAC;EAAED;AAAG,CAAC,EAAE;EACpC,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOX,WAAW,CAAC,aAAakB,EAAE,EAAE,EAAE;IACpCJ,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ;AAGA,OAAO,SAASW,iBAAiBA,CAAC;EAAEF,EAAE,EAAEG;AAAU,CAAC,EAAE;EACnD,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOX,WAAW,CAAC,eAAe,EAAE;IAClCc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAEK;IAAU;EACpB,CAAC,CAAC;AACJ;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACnD,MAAMlB,MAAM,GAAGiB,GAAG,CAACE,MAAM,CAACnB,MAAM;EAChC,MAAMoB,MAAM,GAAGH,GAAG,CAACI,IAAI,CAACC,GAAG;EAE3B,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,GAAG,CAACE,MAAM,CAACnB,MAAM,CAAC;IACzDuB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,GAAG,CAACI,IAAI,CAAC,CAAC,CAAO;IAC7CE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,GAAG,CAACI,IAAI,CAACC,GAAG,CAAC;IAC7CC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,GAAG,CAACI,IAAI,CAACT,EAAE,CAAC,CAAC,CAAC;IAC7C,MAAMa,IAAI,GAAG,MAAM7B,IAAI,CAAC8B,QAAQ,CAAC1B,MAAM,CAAC,CAAC2B,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC;IACvEJ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,IAAI,CAACG,MAAM,CAAC;IAC7CL,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,IAAI,CAAC;IACnC,IAAI,CAACA,IAAI,EAAE,OAAOP,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAiB,CAAC,CAAC;IAEnE,MAAMC,QAAQ,GAAG,MAAMnC,OAAO,CAACoC,IAAI,CAAC;MAAEjC,MAAM,EAAE,IAAIL,QAAQ,CAACuC,KAAK,CAACC,QAAQ,CAACnC,MAAM;IAAE,CAAC,CAAC,CAC3EoC,IAAI,CAAC;MAAEC,SAAS,EAAE;IAAE,CAAC,CAAC,CACtBV,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC;IACrCJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAGQ,QAAQ,CAAC;IAC9C,MAAMM,iBAAiB,GAAG,MAAMhC,OAAO,CAACiC,GAAG,CACvCP,QAAQ,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACpB,IAAI,CAAC,CAACqB,GAAG,CAAC,MAAMC,OAAO,IAAI;MAC9C,MAAMC,SAAS,GAAG,MAAM9C,IAAI,CAAC+C,cAAc,CAAC;QAAE9B,SAAS,EAAE4B,OAAO,CAACrB;MAAI,CAAC,CAAC;MACvE,MAAMwB,SAAS,GAAG1B,MAAM,GAClB,MAAMtB,IAAI,CAACiD,MAAM,CAAC;QAAEhC,SAAS,EAAE4B,OAAO,CAACrB,GAAG;QAAED,IAAI,EAAED;MAAO,CAAC,CAAC,GAC3D,KAAK;MAEX,OAAO;QACH,GAAGuB,OAAO,CAACK,QAAQ,CAAC,CAAC;QACrBJ,SAAS;QACTE,SAAS,EAAE,CAAC,CAACA,SAAS;QACtBzB,IAAI,EAAE;UACFT,EAAE,EAAE+B,OAAO,CAACtB,IAAI,CAACC,GAAG;UACpB2B,IAAI,EAAEN,OAAO,CAACtB,IAAI,CAAC6B;QACvB;MACJ,CAAC;IACL,CAAC,CACL,CAAC;IAED,OAAOhC,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACxBL,IAAI,EAAE;QACF,GAAGA,IAAI,CAACuB,QAAQ,CAAC,CAAC;QAClBpB,MAAM,EAAE;UACJhB,EAAE,EAAEa,IAAI,CAACG,MAAM,CAACN,GAAG;UACnB2B,IAAI,EAAExB,IAAI,CAACG,MAAM,CAACsB;QACtB;MACJ,CAAC;MACDlB,QAAQ,EAAEM;IACd,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZR,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEP,GAAG,CAACI,IAAI,CAAC;IACrCE,OAAO,CAACQ,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAOb,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAoC,CAAC,CAAC;EAC/E;AACJ,CAAC;;AAGD;AACA,OAAO,SAASoB,cAAcA,CAAChD,KAAK,EAAE;EACpC,OAAOiD,KAAK,CAAC,gBAAgB,EAAE;IAC7B5C,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE,CAAG;IACvC;EACF,CAAC,CAAC,CACCkD,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACxB,IAAI,CAAC,CAAC,CAAC,CACjCuB,IAAI,CAAC3C,IAAI,IAAIA,IAAI,CAACW,IAAI,CAAC,CAAE;EAAA,CACzBkC,KAAK,CAACxB,KAAK,IAAI;IACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
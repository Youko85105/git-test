{"ast":null,"code":"import axios from 'axios';\n\n// Mistral API configuration\nconst MISTRAL_API_URL = process.env.REACT_APP_MISTRAL_API_URL || 'https://api.mistral.ai/v1/chat/completions';\nconst MISTRAL_API_KEY = process.env.REACT_APP_MISTRAL_API_KEY;\nconst MISTRAL_MODEL = process.env.REACT_APP_MISTRAL_MODEL || 'mistral-7b-instruct';\n\n// System prompt for your fine-tuned model\nconst SYSTEM_PROMPT = `You are a helpful assistant for SubHub, a subscription-based content platform. You help users understand how the platform works, including:\n\n- How to become a content creator\n- How subscriptions work\n- Payment and fee structures  \n- Content creation and posting\n- User dashboard features\n- Admin capabilities\n- Platform policies\n\nKeep responses helpful, concise, and focused on SubHub platform features. If you don't know something specific about SubHub, be honest about it.`;\n\n/**\n * Chat with the fine-tuned Mistral model\n * @param {string} userMessage - The user's message\n * @param {Array} conversationHistory - Previous messages for context (optional)\n * @returns {Promise<string>} - The bot's response\n */\nexport const chatWithMistral = async (userMessage, conversationHistory = []) => {\n  try {\n    var _response$data$choice, _response$data$choice2, _response$data$choice3;\n    // Prepare the messages array for the API call\n    const messages = [{\n      role: 'system',\n      content: SYSTEM_PROMPT\n    },\n    // Add conversation history if provided\n    ...conversationHistory.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })),\n    // Add the current user message\n    {\n      role: 'user',\n      content: userMessage\n    }];\n\n    // Check if API key is configured\n    if (!MISTRAL_API_KEY) {\n      throw new Error('Mistral API key not configured. Please set REACT_APP_MISTRAL_API_KEY in your environment.');\n    }\n    console.log('ü§ñ Sending request to Mistral API...');\n    const response = await axios.post(MISTRAL_API_URL, {\n      model: MISTRAL_MODEL,\n      messages: messages,\n      max_tokens: 500,\n      temperature: 0.7,\n      top_p: 0.9,\n      stream: false\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${MISTRAL_API_KEY}`\n      },\n      timeout: 30000 // 30 seconds timeout\n    });\n    console.log('‚úÖ Received response from Mistral API');\n\n    // Extract the response text\n    const botResponse = (_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : _response$data$choice3.content;\n    if (!botResponse) {\n      throw new Error('No response received from Mistral API');\n    }\n    return botResponse;\n  } catch (error) {\n    console.error('‚ùå Mistral API error:', error);\n\n    // Handle different types of errors\n    if (error.response) {\n      var _error$response$data, _error$response$data$, _error$response$data2;\n      // API returned an error response\n      const status = error.response.status;\n      const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'API Error';\n      switch (status) {\n        case 401:\n          throw new Error('Invalid API key. Please check your Mistral API configuration.');\n        case 429:\n          throw new Error('Rate limit exceeded. Please try again in a moment.');\n        case 500:\n          throw new Error('Mistral API server error. Please try again later.');\n        default:\n          throw new Error(`API Error (${status}): ${message}`);\n      }\n    } else if (error.request) {\n      // Network error\n      throw new Error('Network error. Please check your internet connection and try again.');\n    } else if (error.code === 'ECONNABORTED') {\n      // Timeout error\n      throw new Error('Request timed out. Please try again.');\n    } else {\n      // Other error\n      throw new Error(error.message || 'An unexpected error occurred.');\n    }\n  }\n};\n\n/**\n * Alternative implementation for local Mistral API or custom endpoint\n * @param {string} userMessage \n * @param {Array} conversationHistory \n * @returns {Promise<string>}\n */\nexport const chatWithLocalMistral = async (userMessage, conversationHistory = []) => {\n  try {\n    var _response$data$messag;\n    // For local Mistral deployment (e.g., using Ollama, vLLM, etc.)\n    const LOCAL_API_URL = process.env.REACT_APP_LOCAL_MISTRAL_URL || 'http://localhost:11434/api/chat';\n    const response = await axios.post(LOCAL_API_URL, {\n      model: MISTRAL_MODEL,\n      messages: [{\n        role: 'system',\n        content: SYSTEM_PROMPT\n      }, ...conversationHistory.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      })), {\n        role: 'user',\n        content: userMessage\n      }],\n      stream: false\n    });\n    return ((_response$data$messag = response.data.message) === null || _response$data$messag === void 0 ? void 0 : _response$data$messag.content) || response.data.response;\n  } catch (error) {\n    console.error('‚ùå Local Mistral error:', error);\n    throw new Error('Failed to connect to local Mistral instance. Please check if the service is running.');\n  }\n};\n\n/**\n * Mock chatbot response for development/testing\n * @param {string} userMessage \n * @returns {Promise<string>}\n */\nexport const chatWithMockBot = async userMessage => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n  const responses = {\n    'creator': 'To become a creator on SubHub, you need to:\\n\\n1. **Sign up** for a regular account first\\n2. **Upgrade to Creator** from your dashboard\\n3. **Complete Stripe onboarding** for payments\\n4. **Set your subscription fee** and category\\n5. **Start creating content** for your subscribers!\\n\\nCreators earn 85% of subscription fees, with SubHub taking 15% to cover platform costs and payment processing.',\n    'subscription': 'SubHub subscriptions work on a **monthly basis**:\\n\\n‚Ä¢ Users pay creators directly through Stripe\\n‚Ä¢ Subscriptions auto-renew every 30 days\\n‚Ä¢ Subscribers get access to all creator content\\n‚Ä¢ Cancel anytime - access continues until period ends\\n‚Ä¢ Creators set their own monthly fee\\n\\n**Payment is secure** and processed through Stripe for safety.',\n    'payment': 'SubHub uses **Stripe** for all payments:\\n\\n**For Subscribers:**\\n‚Ä¢ Pay with credit/debit cards\\n‚Ä¢ Secure checkout process\\n‚Ä¢ Monthly billing cycles\\n\\n**For Creators:**\\n‚Ä¢ Receive 85% of subscription fees\\n‚Ä¢ Daily payouts to your bank account\\n‚Ä¢ Must complete Stripe onboarding first\\n‚Ä¢ Earnings tracked in your dashboard',\n    'cancel': 'You can **cancel subscriptions anytime**:\\n\\n1. Go to your Reader Dashboard\\n2. Find the subscription in your list\\n3. Click \"Cancel Subscription\"\\n4. Confirm the cancellation\\n\\n**Important:** You\\'ll keep access until your current billing period ends, so you won\\'t lose any paid time!',\n    'admin': 'SubHub has **Admin capabilities** for platform management:\\n\\n‚Ä¢ View platform statistics\\n‚Ä¢ Monitor user activity\\n‚Ä¢ Manage content and users\\n‚Ä¢ Access analytics dashboards\\n‚Ä¢ Handle platform-wide settings\\n\\nAdmins can access the admin dashboard with proper credentials.',\n    'default': `I'd be happy to help you with that! Here are some things I can assist you with on SubHub:\n\n**Getting Started:**\n‚Ä¢ How to create an account\n‚Ä¢ Becoming a content creator\n‚Ä¢ Setting up subscriptions\n\n**For Users:**\n‚Ä¢ How subscriptions work\n‚Ä¢ Managing your subscriptions\n‚Ä¢ Payment information\n\n**For Creators:**\n‚Ä¢ Creator dashboard features\n‚Ä¢ Setting subscription fees\n‚Ä¢ Content creation tips\n‚Ä¢ Payout information\n\n**Platform Features:**\n‚Ä¢ Comments and interactions\n‚Ä¢ Notifications\n‚Ä¢ Search and discovery\n\nCould you ask me something more specific? I'm here to help! üòä`\n  };\n\n  // Simple keyword matching for mock responses\n  const lowerMessage = userMessage.toLowerCase();\n  if (lowerMessage.includes('creator') || lowerMessage.includes('become')) {\n    return responses.creator;\n  } else if (lowerMessage.includes('subscription') || lowerMessage.includes('subscribe')) {\n    return responses.subscription;\n  } else if (lowerMessage.includes('payment') || lowerMessage.includes('pay') || lowerMessage.includes('fee')) {\n    return responses.payment;\n  } else if (lowerMessage.includes('cancel') || lowerMessage.includes('unsubscribe')) {\n    return responses.cancel;\n  } else if (lowerMessage.includes('admin') || lowerMessage.includes('dashboard')) {\n    return responses.admin;\n  } else {\n    return responses.default;\n  }\n};\n\n// Export the main chat function - you can switch between implementations\nexport const chatBot = process.env.REACT_APP_USE_MOCK_BOT === 'true' ? chatWithMockBot : chatWithMistral;","map":{"version":3,"names":["axios","MISTRAL_API_URL","process","env","REACT_APP_MISTRAL_API_URL","MISTRAL_API_KEY","REACT_APP_MISTRAL_API_KEY","MISTRAL_MODEL","REACT_APP_MISTRAL_MODEL","SYSTEM_PROMPT","chatWithMistral","userMessage","conversationHistory","_response$data$choice","_response$data$choice2","_response$data$choice3","messages","role","content","map","msg","sender","text","Error","console","log","response","post","model","max_tokens","temperature","top_p","stream","headers","timeout","botResponse","data","choices","message","error","_error$response$data","_error$response$data$","_error$response$data2","status","request","code","chatWithLocalMistral","_response$data$messag","LOCAL_API_URL","REACT_APP_LOCAL_MISTRAL_URL","chatWithMockBot","Promise","resolve","setTimeout","Math","random","responses","lowerMessage","toLowerCase","includes","creator","subscription","payment","cancel","admin","default","chatBot","REACT_APP_USE_MOCK_BOT"],"sources":["/Users/htoothetnaung/Documents/UIT/Sem7_KE/Projects/ADBMS/git-test/sem7-project/project/src/services/chatbot.js"],"sourcesContent":["import axios from 'axios';\n\n// Mistral API configuration\nconst MISTRAL_API_URL = process.env.REACT_APP_MISTRAL_API_URL || 'https://api.mistral.ai/v1/chat/completions';\nconst MISTRAL_API_KEY = process.env.REACT_APP_MISTRAL_API_KEY;\nconst MISTRAL_MODEL = process.env.REACT_APP_MISTRAL_MODEL || 'mistral-7b-instruct';\n\n// System prompt for your fine-tuned model\nconst SYSTEM_PROMPT = `You are a helpful assistant for SubHub, a subscription-based content platform. You help users understand how the platform works, including:\n\n- How to become a content creator\n- How subscriptions work\n- Payment and fee structures  \n- Content creation and posting\n- User dashboard features\n- Admin capabilities\n- Platform policies\n\nKeep responses helpful, concise, and focused on SubHub platform features. If you don't know something specific about SubHub, be honest about it.`;\n\n/**\n * Chat with the fine-tuned Mistral model\n * @param {string} userMessage - The user's message\n * @param {Array} conversationHistory - Previous messages for context (optional)\n * @returns {Promise<string>} - The bot's response\n */\nexport const chatWithMistral = async (userMessage, conversationHistory = []) => {\n    try {\n        // Prepare the messages array for the API call\n        const messages = [\n            {\n                role: 'system',\n                content: SYSTEM_PROMPT\n            },\n            // Add conversation history if provided\n            ...conversationHistory.map(msg => ({\n                role: msg.sender === 'user' ? 'user' : 'assistant',\n                content: msg.text\n            })),\n            // Add the current user message\n            {\n                role: 'user',\n                content: userMessage\n            }\n        ];\n\n        // Check if API key is configured\n        if (!MISTRAL_API_KEY) {\n            throw new Error('Mistral API key not configured. Please set REACT_APP_MISTRAL_API_KEY in your environment.');\n        }\n\n        console.log('ü§ñ Sending request to Mistral API...');\n        \n        const response = await axios.post(\n            MISTRAL_API_URL,\n            {\n                model: MISTRAL_MODEL,\n                messages: messages,\n                max_tokens: 500,\n                temperature: 0.7,\n                top_p: 0.9,\n                stream: false\n            },\n            {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${MISTRAL_API_KEY}`,\n                },\n                timeout: 30000 // 30 seconds timeout\n            }\n        );\n\n        console.log('‚úÖ Received response from Mistral API');\n\n        // Extract the response text\n        const botResponse = response.data.choices?.[0]?.message?.content;\n        \n        if (!botResponse) {\n            throw new Error('No response received from Mistral API');\n        }\n\n        return botResponse;\n\n    } catch (error) {\n        console.error('‚ùå Mistral API error:', error);\n\n        // Handle different types of errors\n        if (error.response) {\n            // API returned an error response\n            const status = error.response.status;\n            const message = error.response.data?.error?.message || error.response.data?.message || 'API Error';\n            \n            switch (status) {\n                case 401:\n                    throw new Error('Invalid API key. Please check your Mistral API configuration.');\n                case 429:\n                    throw new Error('Rate limit exceeded. Please try again in a moment.');\n                case 500:\n                    throw new Error('Mistral API server error. Please try again later.');\n                default:\n                    throw new Error(`API Error (${status}): ${message}`);\n            }\n        } else if (error.request) {\n            // Network error\n            throw new Error('Network error. Please check your internet connection and try again.');\n        } else if (error.code === 'ECONNABORTED') {\n            // Timeout error\n            throw new Error('Request timed out. Please try again.');\n        } else {\n            // Other error\n            throw new Error(error.message || 'An unexpected error occurred.');\n        }\n    }\n};\n\n/**\n * Alternative implementation for local Mistral API or custom endpoint\n * @param {string} userMessage \n * @param {Array} conversationHistory \n * @returns {Promise<string>}\n */\nexport const chatWithLocalMistral = async (userMessage, conversationHistory = []) => {\n    try {\n        // For local Mistral deployment (e.g., using Ollama, vLLM, etc.)\n        const LOCAL_API_URL = process.env.REACT_APP_LOCAL_MISTRAL_URL || 'http://localhost:11434/api/chat';\n        \n        const response = await axios.post(LOCAL_API_URL, {\n            model: MISTRAL_MODEL,\n            messages: [\n                { role: 'system', content: SYSTEM_PROMPT },\n                ...conversationHistory.map(msg => ({\n                    role: msg.sender === 'user' ? 'user' : 'assistant',\n                    content: msg.text\n                })),\n                { role: 'user', content: userMessage }\n            ],\n            stream: false\n        });\n\n        return response.data.message?.content || response.data.response;\n        \n    } catch (error) {\n        console.error('‚ùå Local Mistral error:', error);\n        throw new Error('Failed to connect to local Mistral instance. Please check if the service is running.');\n    }\n};\n\n/**\n * Mock chatbot response for development/testing\n * @param {string} userMessage \n * @returns {Promise<string>}\n */\nexport const chatWithMockBot = async (userMessage) => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n    \n    const responses = {\n        'creator': 'To become a creator on SubHub, you need to:\\n\\n1. **Sign up** for a regular account first\\n2. **Upgrade to Creator** from your dashboard\\n3. **Complete Stripe onboarding** for payments\\n4. **Set your subscription fee** and category\\n5. **Start creating content** for your subscribers!\\n\\nCreators earn 85% of subscription fees, with SubHub taking 15% to cover platform costs and payment processing.',\n        \n        'subscription': 'SubHub subscriptions work on a **monthly basis**:\\n\\n‚Ä¢ Users pay creators directly through Stripe\\n‚Ä¢ Subscriptions auto-renew every 30 days\\n‚Ä¢ Subscribers get access to all creator content\\n‚Ä¢ Cancel anytime - access continues until period ends\\n‚Ä¢ Creators set their own monthly fee\\n\\n**Payment is secure** and processed through Stripe for safety.',\n        \n        'payment': 'SubHub uses **Stripe** for all payments:\\n\\n**For Subscribers:**\\n‚Ä¢ Pay with credit/debit cards\\n‚Ä¢ Secure checkout process\\n‚Ä¢ Monthly billing cycles\\n\\n**For Creators:**\\n‚Ä¢ Receive 85% of subscription fees\\n‚Ä¢ Daily payouts to your bank account\\n‚Ä¢ Must complete Stripe onboarding first\\n‚Ä¢ Earnings tracked in your dashboard',\n        \n        'cancel': 'You can **cancel subscriptions anytime**:\\n\\n1. Go to your Reader Dashboard\\n2. Find the subscription in your list\\n3. Click \"Cancel Subscription\"\\n4. Confirm the cancellation\\n\\n**Important:** You\\'ll keep access until your current billing period ends, so you won\\'t lose any paid time!',\n        \n        'admin': 'SubHub has **Admin capabilities** for platform management:\\n\\n‚Ä¢ View platform statistics\\n‚Ä¢ Monitor user activity\\n‚Ä¢ Manage content and users\\n‚Ä¢ Access analytics dashboards\\n‚Ä¢ Handle platform-wide settings\\n\\nAdmins can access the admin dashboard with proper credentials.',\n        \n        'default': `I'd be happy to help you with that! Here are some things I can assist you with on SubHub:\n\n**Getting Started:**\n‚Ä¢ How to create an account\n‚Ä¢ Becoming a content creator\n‚Ä¢ Setting up subscriptions\n\n**For Users:**\n‚Ä¢ How subscriptions work\n‚Ä¢ Managing your subscriptions\n‚Ä¢ Payment information\n\n**For Creators:**\n‚Ä¢ Creator dashboard features\n‚Ä¢ Setting subscription fees\n‚Ä¢ Content creation tips\n‚Ä¢ Payout information\n\n**Platform Features:**\n‚Ä¢ Comments and interactions\n‚Ä¢ Notifications\n‚Ä¢ Search and discovery\n\nCould you ask me something more specific? I'm here to help! üòä`\n    };\n    \n    // Simple keyword matching for mock responses\n    const lowerMessage = userMessage.toLowerCase();\n    \n    if (lowerMessage.includes('creator') || lowerMessage.includes('become')) {\n        return responses.creator;\n    } else if (lowerMessage.includes('subscription') || lowerMessage.includes('subscribe')) {\n        return responses.subscription;\n    } else if (lowerMessage.includes('payment') || lowerMessage.includes('pay') || lowerMessage.includes('fee')) {\n        return responses.payment;\n    } else if (lowerMessage.includes('cancel') || lowerMessage.includes('unsubscribe')) {\n        return responses.cancel;\n    } else if (lowerMessage.includes('admin') || lowerMessage.includes('dashboard')) {\n        return responses.admin;\n    } else {\n        return responses.default;\n    }\n};\n\n// Export the main chat function - you can switch between implementations\nexport const chatBot = process.env.REACT_APP_USE_MOCK_BOT === 'true' \n    ? chatWithMockBot \n    : chatWithMistral;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
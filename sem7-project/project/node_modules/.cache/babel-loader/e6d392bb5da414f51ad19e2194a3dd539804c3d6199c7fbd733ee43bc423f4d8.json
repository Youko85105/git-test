{"ast":null,"code":"// src/services/posts.js\nimport { makeRequest } from \"./makeRequest\";\n\n// Viewer: fetch a creator's posts (subscription-gated)\nexport function getCreatorPosts(creatorId) {\n  return makeRequest(`/private/post/${creatorId}`);\n}\n\n// Creator: fetch my own posts (dashboard)\nexport function getMyPosts() {\n  return makeRequest(`/private/post`);\n}\n\n// Single post + comments (detail)\nexport function getPostDetail(postId) {\n  return makeRequest(`/private/post/detail/${postId}`);\n}\n\n// src/services/posts.js\nexport async function togglePostLike(postId) {\n  const token = localStorage.getItem(\"token\") || \"\";\n  const res = await fetch(`http://localhost:3002/api/private/post/togglepostlike/${postId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token ? `Bearer ${token}` : \"\"\n    }\n  });\n\n  // Handle common failures explicitly\n  if (res.status === 401) {\n    const err = new Error(\"UNAUTHORIZED\");\n    err.status = 401;\n    throw err;\n  }\n  if (!res.ok) {\n    // Surface body message for debugging\n    let message = \"Request failed\";\n    try {\n      const body = await res.json();\n      if (body !== null && body !== void 0 && body.message) message = body.message;\n    } catch {}\n    const err = new Error(message);\n    err.status = res.status;\n    throw err;\n  }\n\n  // Success (your API returns { liked: boolean })\n  return res.json();\n}\n\n/** ---- Backward-compat shims so old imports don't break ---- */\nexport const getPost = getPostDetail; // old name -> new route\nexport const getPosts = getMyPosts; // old ambiguous name -> \"my posts\"","map":{"version":3,"names":["makeRequest","getCreatorPosts","creatorId","getMyPosts","getPostDetail","postId","togglePostLike","token","localStorage","getItem","res","fetch","method","headers","Authorization","status","err","Error","ok","message","body","json","getPost","getPosts"],"sources":["/Users/chawsuhan/Music/git-test/sem7-project/project/src/services/posts.js"],"sourcesContent":["// src/services/posts.js\nimport { makeRequest } from \"./makeRequest\";\n\n// Viewer: fetch a creator's posts (subscription-gated)\nexport function getCreatorPosts(creatorId) {\n  return makeRequest(`/private/post/${creatorId}`);\n}\n\n// Creator: fetch my own posts (dashboard)\nexport function getMyPosts() {\n  return makeRequest(`/private/post`);\n}\n\n// Single post + comments (detail)\nexport function getPostDetail(postId) {\n  return makeRequest(`/private/post/detail/${postId}`);\n}\n\n// src/services/posts.js\nexport async function togglePostLike(postId) {\n  const token = localStorage.getItem(\"token\") || \"\";\n\n  const res = await fetch(\n    `http://localhost:3002/api/private/post/togglepostlike/${postId}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token ? `Bearer ${token}` : \"\",\n      },\n    }\n  );\n\n  // Handle common failures explicitly\n  if (res.status === 401) {\n    const err = new Error(\"UNAUTHORIZED\");\n    err.status = 401;\n    throw err;\n  }\n  if (!res.ok) {\n    // Surface body message for debugging\n    let message = \"Request failed\";\n    try {\n      const body = await res.json();\n      if (body?.message) message = body.message;\n    } catch {}\n    const err = new Error(message);\n    err.status = res.status;\n    throw err;\n  }\n\n  // Success (your API returns { liked: boolean })\n  return res.json();\n}\n\n\n/** ---- Backward-compat shims so old imports don't break ---- */\nexport const getPost = getPostDetail;  // old name -> new route\nexport const getPosts = getMyPosts;    // old ambiguous name -> \"my posts\"\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,eAAe;;AAE3C;AACA,OAAO,SAASC,eAAeA,CAACC,SAAS,EAAE;EACzC,OAAOF,WAAW,CAAC,iBAAiBE,SAAS,EAAE,CAAC;AAClD;;AAEA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,OAAOH,WAAW,CAAC,eAAe,CAAC;AACrC;;AAEA;AACA,OAAO,SAASI,aAAaA,CAACC,MAAM,EAAE;EACpC,OAAOL,WAAW,CAAC,wBAAwBK,MAAM,EAAE,CAAC;AACtD;;AAEA;AACA,OAAO,eAAeC,cAAcA,CAACD,MAAM,EAAE;EAC3C,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAEjD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,yDAAyDN,MAAM,EAAE,EACjE;IACEO,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAEP,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;IAC7C;EACF,CACF,CAAC;;EAED;EACA,IAAIG,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;IACtB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,cAAc,CAAC;IACrCD,GAAG,CAACD,MAAM,GAAG,GAAG;IAChB,MAAMC,GAAG;EACX;EACA,IAAI,CAACN,GAAG,CAACQ,EAAE,EAAE;IACX;IACA,IAAIC,OAAO,GAAG,gBAAgB;IAC9B,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;MAC7B,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAED,OAAO,EAAEA,OAAO,GAAGC,IAAI,CAACD,OAAO;IAC3C,CAAC,CAAC,MAAM,CAAC;IACT,MAAMH,GAAG,GAAG,IAAIC,KAAK,CAACE,OAAO,CAAC;IAC9BH,GAAG,CAACD,MAAM,GAAGL,GAAG,CAACK,MAAM;IACvB,MAAMC,GAAG;EACX;;EAEA;EACA,OAAON,GAAG,CAACW,IAAI,CAAC,CAAC;AACnB;;AAGA;AACA,OAAO,MAAMC,OAAO,GAAGlB,aAAa,CAAC,CAAE;AACvC,OAAO,MAAMmB,QAAQ,GAAGpB,UAAU,CAAC,CAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
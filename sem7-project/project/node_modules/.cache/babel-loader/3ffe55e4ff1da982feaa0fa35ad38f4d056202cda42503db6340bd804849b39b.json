{"ast":null,"code":"import { makeRequest } from \"./api\";\nexport function createComment({\n  postId,\n  message,\n  parentId\n}) {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n  return makeRequest(`/private/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      message,\n      postId,\n      parentId\n    }\n  });\n}\nexport function updateComment({\n  message,\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/private/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      message\n    }\n  });\n}\nexport function deleteComment({\n  id\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n}\nexport function toggleCommentLike({\n  id: commentId\n}) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    },\n    data: {\n      commentId\n    }\n  });\n}\nexport function getPost(postId) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/private/post/${postId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n}\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return makeRequest(`/user`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }).then(data => data.user);\n}","map":{"version":3,"names":["makeRequest","createComment","postId","message","parentId","token","localStorage","getItem","Promise","reject","method","headers","data","updateComment","id","deleteComment","toggleCommentLike","commentId","getPost","Authorization","getCurrentUser","then","user"],"sources":["/Users/chawsuhan/git-test/sem7-project/project/src/services/comments.js"],"sourcesContent":["import { makeRequest } from \"./api\";\n\nexport function createComment({ postId, message, parentId }) {\n  const token = localStorage.getItem('token');\n\n  if (!token) {\n    return Promise.reject('User is not authenticated');\n  }\n\n  return makeRequest(`/private/comments`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { message, postId, parentId },\n  });\n}\n\n\n\n\nexport function updateComment({ message, id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/private/comments/${id}`, {\n    method: \"PUT\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { message },\n  });\n}\n\n\nexport function deleteComment({ id }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/comments/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\n\nexport function toggleCommentLike({ id: commentId }) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/likes/toggle`, {\n    method: \"POST\",\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n    data: { commentId },\n  });\n}\n\nexport function getPost(postId) {\n  const token = localStorage.getItem('token');\n  return makeRequest(`/private/post/${postId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n}\n\n\n// This function makes a request to get the current user data based on the JWT token.\nexport function getCurrentUser(token) {\n  return makeRequest(`/user`, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    }\n  }).then(data => data.user);\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,SAASC,aAAaA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAC3D,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAI,CAACF,KAAK,EAAE;IACV,OAAOG,OAAO,CAACC,MAAM,CAAC,2BAA2B,CAAC;EACpD;EAEA,OAAOT,WAAW,CAAC,mBAAmB,EAAE;IACtCU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAET,OAAO;MAAED,MAAM;MAAEE;IAAS;EACpC,CAAC,CAAC;AACJ;AAKA,OAAO,SAASS,aAAaA,CAAC;EAAEV,OAAO;EAAEW;AAAG,CAAC,EAAE;EAC7C,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,qBAAqBc,EAAE,EAAE,EAAE;IAC5CJ,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAET;IAAQ;EAClB,CAAC,CAAC;AACJ;AAGA,OAAO,SAASY,aAAaA,CAAC;EAAED;AAAG,CAAC,EAAE;EACpC,MAAMT,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,aAAac,EAAE,EAAE,EAAE;IACpCJ,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ;AAGA,OAAO,SAASW,iBAAiBA,CAAC;EAAEF,EAAE,EAAEG;AAAU,CAAC,EAAE;EACnD,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,eAAe,EAAE;IAClCU,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUN,KAAK,EAAE;MAClC,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAE;MAAEK;IAAU;EACpB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,OAAOA,CAAChB,MAAM,EAAE;EAC9B,MAAMG,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAOP,WAAW,CAAC,iBAAiBE,MAAM,EAAE,EAAE;IAC5CS,OAAO,EAAE;MACPQ,aAAa,EAAE,UAAUd,KAAK;IAChC;EACF,CAAC,CAAC;AACJ;;AAGA;AACA,OAAO,SAASe,cAAcA,CAACf,KAAK,EAAE;EACpC,OAAOL,WAAW,CAAC,OAAO,EAAE;IAC1BU,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPQ,aAAa,EAAE,UAAUd,KAAK;IAChC;EACF,CAAC,CAAC,CAACgB,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACU,IAAI,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}